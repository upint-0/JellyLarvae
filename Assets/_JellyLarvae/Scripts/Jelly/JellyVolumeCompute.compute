/// KERNEL DECLARATION 
#pragma kernel CSMain
#pragma kernel CSInit
#pragma kernel CSRemoveJellyByMask
#pragma kernel CSReadAndWriteJelly
#pragma kernel CSWriteJelly

// STRUCT
struct pointInfos
{
    int id;
    float jellyValue;
};
struct JellyReader
{
    int id;
    float2 position;
    bool isEating;
    float eatRadius;
    float2 eatPosition;
};

struct JellyWriter
{
    float2 position;
    float radius;
};
// BUFFER & TEXTURE
RWTexture2D<float2> _JellyMask;
Texture2D<float2> _JellyMaskSource;
Texture2D<float> _ObstaclesMask;

StructuredBuffer<JellyReader> _PlayerInfos;
StructuredBuffer<JellyReader> _JellyReaders;
StructuredBuffer<JellyWriter> _JellyWriter;
RWStructuredBuffer<pointInfos> _PointsInfos;
RWStructuredBuffer<pointInfos> _JellyReadersOut;
// VARS
int _JellyReadersCount;
int _JellyWritersCount;

float4 _BrushSettings;
float4 _CanvasSettings;
float2 _TextureSize;

float2 playerPos;
// WORLD VAR 
float deltaTime;

// CONST
#define DETECT_RADIUS 0.5
#define EAT_RADIUS 0
#define BLUR_SAMPLE 10
#define EAT_STRENGTH 300
#define WRITE_STRENGTH 4

[numthreads(8, 8, 1)]
void CSInit(uint3 id : SV_DispatchThreadID)
{
    _JellyMask[id.xy] = _JellyMaskSource[id.xy];
}

float GetMaskValue(float value)
{
    return (value > 0.05);
}
float BlurObstacle(int2 id)
{
    float value = 0;

    for(int i = 0; i < BLUR_SAMPLE; i++)
    {
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(0,i)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(0,-i)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(i,0)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(-i,0)].x);
        
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(-i,i)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(-i,-i)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(i,-i)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(i,i)].x);
    }
    value = saturate(pow(value / (BLUR_SAMPLE * 8), 0.7) * 1.8);
    //if(value > 0.05) value = 0.7;
    return max(value, GetMaskValue(_ObstaclesMask[id]));
}

[numthreads(8, 8, 1)]
void CSRemoveJellyByMask(uint3 id : SV_DispatchThreadID)
{
    float2 value = _JellyMaskSource[id.xy];

    float obstacle = 1 - BlurObstacle(id.xy);
    value = float2(min(value.x, obstacle), 1 - obstacle);
    
    _JellyMask[id.xy] = value;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float2 posWS = ((id.xy / _TextureSize) * _CanvasSettings.zw) + _CanvasSettings.xy - (_CanvasSettings.zw / 2);

    float2 value = _JellyMask[id.xy];
    JellyReader player = _PlayerInfos[0];
    
    if (_BrushSettings.w > 0)
    {
        float distance = 1 - length(posWS - _BrushSettings.xy) / _BrushSettings.z;
        value.x = max(value.x, distance);
    }
    else
    {
        //float distanceToPlayer = length(playerPos.xy - posWS);
        float distanceToPlayer = 1- length(posWS - player.position);

        if(player.isEating)
        {
            float eatDistance = (1- length(posWS - player.eatPosition)) / player.eatRadius;
            if(eatDistance > EAT_RADIUS)
            {
                value.x = saturate(value.x - (eatDistance * deltaTime * EAT_STRENGTH));
            }
        }
        
        if (distanceToPlayer > DETECT_RADIUS)
        {
            _PointsInfos[0].jellyValue = value.x;
        }
    }
    
    _JellyMask[id.xy] = value;
}

int2 ConvertWSToLocal(float2 pos, float2 canvasSize, float2 canvasPos, float2 textureSize)
{
    return ((pos + (canvasSize / 2) - canvasPos) / canvasSize) * textureSize;
}

[numthreads(64, 1, 1)]
void CSReadAndWriteJelly(uint3 id : SV_DispatchThreadID)
{
    const int index = int(id.x);
    if(_JellyReadersCount <= index) return;

    const JellyReader reader = _JellyReaders[index];
    const int2 checkPos = ConvertWSToLocal(reader.position, _CanvasSettings.zw, _CanvasSettings.xy, _TextureSize);

    // Out jelly value at jelly reader position 
    _JellyReadersOut[index].id = reader.id;
    _JellyReadersOut[index].jellyValue = _JellyMask[checkPos].x;
}

[numthreads(64, 1, 1)]
void CSWriteJelly(uint3 id : SV_DispatchThreadID)
{
    const int index = int(id.x);
    if(_JellyWritersCount <= index) return;

    const JellyWriter writer = _JellyWriter[index];
    const int2 checkPos = ConvertWSToLocal(writer.position, _CanvasSettings.zw, _CanvasSettings.xy, _TextureSize);

    const int radius = writer.radius;

    for (int y = -radius; y <= radius; y++)
    {
        for (int x = -radius; x <= radius; x++)
        {
            const int2 currentPos = checkPos + int2(x, y);
            const float dist = ((float) max(abs(x), abs(y))) / radius;
            float value = saturate(_JellyMask[currentPos].x + (deltaTime * WRITE_STRENGTH * (1 - dist)));
            _JellyMask[currentPos] = float2(min(value, 1 - _JellyMask[currentPos].y), _JellyMask[currentPos].y);
        }
    }
    
    //_JellyMask[checkPos] += deltaTime * WRITE_STRENGTH;
}

