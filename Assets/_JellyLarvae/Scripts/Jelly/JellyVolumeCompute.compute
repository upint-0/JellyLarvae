#pragma kernel CSMain
#pragma kernel CSInit
#pragma kernel CSRemoveJellyByMask

RWTexture2D<float4> _JellyMask;
Texture2D<float4> _JellyMaskSource;
Texture2D<float> _ObstaclesMask;

struct pointInfos
{
    float jellyValue;
};
struct PlayerInfos
{
    float2 position;
    bool isEating;
    float eatRadius;
    float2 eatPosition;
};

StructuredBuffer<PlayerInfos> _PlayerInfos;
RWStructuredBuffer<pointInfos> _PointsInfos;

float4 _BrushSettings;
float4 _CanvasSettings;
float2 _TextureSize;

float2 playerPos;

#define DETECT_RADIUS 0.5
#define EAT_RADIUS 0
#define BLUR_SAMPLE 10

[numthreads(8, 8, 1)]
void CSInit(uint3 id : SV_DispatchThreadID)
{
    _JellyMask[id.xy] = _JellyMaskSource[id.xy];
}

float GetMaskValue(float value)
{
    return (value > 0.05);
}

float BlurObstacle(int2 id)
{
    float value = 0;

    for(int i = 0; i < BLUR_SAMPLE; i++)
    {
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(0,i)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(0,-i)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(i,0)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(-i,0)].x);
        
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(-i,i)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(-i,-i)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(i,-i)].x);
        value += GetMaskValue(_ObstaclesMask[id.xy + int2(i,i)].x);
    }
    value = saturate(pow(value / (BLUR_SAMPLE * 8), 0.7) * 1.8);
    //if(value > 0.05) value = 0.7;
    return max(value, GetMaskValue(_ObstaclesMask[id]));
}
[numthreads(8, 8, 1)]
void CSRemoveJellyByMask(uint3 id : SV_DispatchThreadID)
{
    float4 value = _JellyMaskSource[id.xy];
    //if(_ObstaclesMask[id.xy].x > 0.1)
    {
        value = min(value, 1 - BlurObstacle(id.xy));
    }
    _JellyMask[id.xy] = value;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float2 posWS = ((id.xy / _TextureSize) * _CanvasSettings.zw) + _CanvasSettings.xy - (_CanvasSettings.zw / 2);

    float4 value = _JellyMask[id.xy];
    PlayerInfos player = _PlayerInfos[0];
    
    if (_BrushSettings.w > 0)
    {
        float distance = 1 - length(posWS - _BrushSettings.xy) / _BrushSettings.z;
        value.x = max(value.x, distance);
    }
    else
    {
        //float distanceToPlayer = length(playerPos.xy - posWS);
        float distanceToPlayer = 1- length(posWS - player.position);

        if(player.isEating)
        {
            float eatDistance = (1- length(posWS - player.eatPosition)) / player.eatRadius;
            if(eatDistance > EAT_RADIUS)
            {
                value.x = saturate(value.x - eatDistance);
            }
        }
        
        if (distanceToPlayer > DETECT_RADIUS)
        {
            _PointsInfos[0].jellyValue = value.x;
        }
    }


    
    value.w = 1;
    _JellyMask[id.xy] = value;

}
